#ifndef NV_SYS_PARAM_READER_H
#define NV_SYS_PARAM_READER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#ifndef FLATBUFFERS_COMMON_READER_H
#include "flatbuffers_common_reader.h"
#endif
#include "flatcc/flatcc_flatbuffers.h"
#ifndef __alignas_is_defined
#include <stdalign.h>
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension "bin"
#endif

typedef struct Nv_ns08_HI_DEV_COMM_CFG Nv_ns08_HI_DEV_COMM_CFG_t;
typedef const Nv_ns08_HI_DEV_COMM_CFG_t *Nv_ns08_HI_DEV_COMM_CFG_struct_t;
typedef Nv_ns08_HI_DEV_COMM_CFG_t *Nv_ns08_HI_DEV_COMM_CFG_mutable_struct_t;
typedef const Nv_ns08_HI_DEV_COMM_CFG_t *Nv_ns08_HI_DEV_COMM_CFG_vec_t;
typedef Nv_ns08_HI_DEV_COMM_CFG_t *Nv_ns08_HI_DEV_COMM_CFG_mutable_vec_t;
typedef struct Nv_ns08_HI_DEV_RTSP_CFG Nv_ns08_HI_DEV_RTSP_CFG_t;
typedef const Nv_ns08_HI_DEV_RTSP_CFG_t *Nv_ns08_HI_DEV_RTSP_CFG_struct_t;
typedef Nv_ns08_HI_DEV_RTSP_CFG_t *Nv_ns08_HI_DEV_RTSP_CFG_mutable_struct_t;
typedef const Nv_ns08_HI_DEV_RTSP_CFG_t *Nv_ns08_HI_DEV_RTSP_CFG_vec_t;
typedef Nv_ns08_HI_DEV_RTSP_CFG_t *Nv_ns08_HI_DEV_RTSP_CFG_mutable_vec_t;
typedef struct Nv_ns08_HI_DEV_CFG Nv_ns08_HI_DEV_CFG_t;
typedef const Nv_ns08_HI_DEV_CFG_t *Nv_ns08_HI_DEV_CFG_struct_t;
typedef Nv_ns08_HI_DEV_CFG_t *Nv_ns08_HI_DEV_CFG_mutable_struct_t;
typedef const Nv_ns08_HI_DEV_CFG_t *Nv_ns08_HI_DEV_CFG_vec_t;
typedef Nv_ns08_HI_DEV_CFG_t *Nv_ns08_HI_DEV_CFG_mutable_vec_t;
typedef struct Nv_ns08_HI_PARAM_STABLE_INFO Nv_ns08_HI_PARAM_STABLE_INFO_t;
typedef const Nv_ns08_HI_PARAM_STABLE_INFO_t *Nv_ns08_HI_PARAM_STABLE_INFO_struct_t;
typedef Nv_ns08_HI_PARAM_STABLE_INFO_t *Nv_ns08_HI_PARAM_STABLE_INFO_mutable_struct_t;
typedef const Nv_ns08_HI_PARAM_STABLE_INFO_t *Nv_ns08_HI_PARAM_STABLE_INFO_vec_t;
typedef Nv_ns08_HI_PARAM_STABLE_INFO_t *Nv_ns08_HI_PARAM_STABLE_INFO_mutable_vec_t;
typedef struct Nv_ns08_NvSysParam Nv_ns08_NvSysParam_t;
typedef const Nv_ns08_NvSysParam_t *Nv_ns08_NvSysParam_struct_t;
typedef Nv_ns08_NvSysParam_t *Nv_ns08_NvSysParam_mutable_struct_t;
typedef const Nv_ns08_NvSysParam_t *Nv_ns08_NvSysParam_vec_t;
typedef Nv_ns08_NvSysParam_t *Nv_ns08_NvSysParam_mutable_vec_t;

#ifndef Nv_ns08_HI_DEV_COMM_CFG_file_identifier
#define Nv_ns08_HI_DEV_COMM_CFG_file_identifier 0
#endif
/* deprecated, use Nv_ns08_HI_DEV_COMM_CFG_file_identifier */
#ifndef Nv_ns08_HI_DEV_COMM_CFG_identifier
#define Nv_ns08_HI_DEV_COMM_CFG_identifier 0
#endif
#define Nv_ns08_HI_DEV_COMM_CFG_type_hash ((flatbuffers_thash_t)0x18f15ea9)
#define Nv_ns08_HI_DEV_COMM_CFG_type_identifier "\xa9\x5e\xf1\x18"
#ifndef Nv_ns08_HI_DEV_COMM_CFG_file_extension
#define Nv_ns08_HI_DEV_COMM_CFG_file_extension "bin"
#endif
#ifndef Nv_ns08_HI_DEV_RTSP_CFG_file_identifier
#define Nv_ns08_HI_DEV_RTSP_CFG_file_identifier 0
#endif
/* deprecated, use Nv_ns08_HI_DEV_RTSP_CFG_file_identifier */
#ifndef Nv_ns08_HI_DEV_RTSP_CFG_identifier
#define Nv_ns08_HI_DEV_RTSP_CFG_identifier 0
#endif
#define Nv_ns08_HI_DEV_RTSP_CFG_type_hash ((flatbuffers_thash_t)0xd31af524)
#define Nv_ns08_HI_DEV_RTSP_CFG_type_identifier "\x24\xf5\x1a\xd3"
#ifndef Nv_ns08_HI_DEV_RTSP_CFG_file_extension
#define Nv_ns08_HI_DEV_RTSP_CFG_file_extension "bin"
#endif
#ifndef Nv_ns08_HI_DEV_CFG_file_identifier
#define Nv_ns08_HI_DEV_CFG_file_identifier 0
#endif
/* deprecated, use Nv_ns08_HI_DEV_CFG_file_identifier */
#ifndef Nv_ns08_HI_DEV_CFG_identifier
#define Nv_ns08_HI_DEV_CFG_identifier 0
#endif
#define Nv_ns08_HI_DEV_CFG_type_hash ((flatbuffers_thash_t)0xd5b29d5e)
#define Nv_ns08_HI_DEV_CFG_type_identifier "\x5e\x9d\xb2\xd5"
#ifndef Nv_ns08_HI_DEV_CFG_file_extension
#define Nv_ns08_HI_DEV_CFG_file_extension "bin"
#endif
#ifndef Nv_ns08_HI_PARAM_STABLE_INFO_file_identifier
#define Nv_ns08_HI_PARAM_STABLE_INFO_file_identifier 0
#endif
/* deprecated, use Nv_ns08_HI_PARAM_STABLE_INFO_file_identifier */
#ifndef Nv_ns08_HI_PARAM_STABLE_INFO_identifier
#define Nv_ns08_HI_PARAM_STABLE_INFO_identifier 0
#endif
#define Nv_ns08_HI_PARAM_STABLE_INFO_type_hash ((flatbuffers_thash_t)0x64c62b1e)
#define Nv_ns08_HI_PARAM_STABLE_INFO_type_identifier "\x1e\x2b\xc6\x64"
#ifndef Nv_ns08_HI_PARAM_STABLE_INFO_file_extension
#define Nv_ns08_HI_PARAM_STABLE_INFO_file_extension "bin"
#endif
#ifndef Nv_ns08_NvSysParam_file_identifier
#define Nv_ns08_NvSysParam_file_identifier 0
#endif
/* deprecated, use Nv_ns08_NvSysParam_file_identifier */
#ifndef Nv_ns08_NvSysParam_identifier
#define Nv_ns08_NvSysParam_identifier 0
#endif
#define Nv_ns08_NvSysParam_type_hash ((flatbuffers_thash_t)0xfb9e975e)
#define Nv_ns08_NvSysParam_type_identifier "\x5e\x97\x9e\xfb"
#ifndef Nv_ns08_NvSysParam_file_extension
#define Nv_ns08_NvSysParam_file_extension "bin"
#endif

typedef int8_t Nv_ns08_TofSensor_enum_t;
__flatbuffers_define_integer_type(Nv_ns08_TofSensor, Nv_ns08_TofSensor_enum_t, 8)
#define Nv_ns08_TofSensor_NV08 ((Nv_ns08_TofSensor_enum_t)INT8_C(0))
#define Nv_ns08_TofSensor_NV09 ((Nv_ns08_TofSensor_enum_t)INT8_C(1))
#define Nv_ns08_TofSensor_NV10 ((Nv_ns08_TofSensor_enum_t)INT8_C(2))
#define Nv_ns08_TofSensor_NV11 ((Nv_ns08_TofSensor_enum_t)INT8_C(3))

static inline const char *Nv_ns08_TofSensor_name(Nv_ns08_TofSensor_enum_t value)
{
    switch (value) {
    case Nv_ns08_TofSensor_NV08: return "NV08";
    case Nv_ns08_TofSensor_NV09: return "NV09";
    case Nv_ns08_TofSensor_NV10: return "NV10";
    case Nv_ns08_TofSensor_NV11: return "NV11";
    default: return "";
    }
}

static inline int Nv_ns08_TofSensor_is_known_value(Nv_ns08_TofSensor_enum_t value)
{
    switch (value) {
    case Nv_ns08_TofSensor_NV08: return 1;
    case Nv_ns08_TofSensor_NV09: return 1;
    case Nv_ns08_TofSensor_NV10: return 1;
    case Nv_ns08_TofSensor_NV11: return 1;
    default: return 0;
    }
}

typedef int8_t Nv_ns08_RgbSensor_enum_t;
__flatbuffers_define_integer_type(Nv_ns08_RgbSensor, Nv_ns08_RgbSensor_enum_t, 8)
#define Nv_ns08_RgbSensor_IMX327 ((Nv_ns08_RgbSensor_enum_t)INT8_C(0))

static inline const char *Nv_ns08_RgbSensor_name(Nv_ns08_RgbSensor_enum_t value)
{
    switch (value) {
    case Nv_ns08_RgbSensor_IMX327: return "IMX327";
    default: return "";
    }
}

static inline int Nv_ns08_RgbSensor_is_known_value(Nv_ns08_RgbSensor_enum_t value)
{
    switch (value) {
    case Nv_ns08_RgbSensor_IMX327: return 1;
    default: return 0;
    }
}


struct Nv_ns08_HI_DEV_COMM_CFG {
    alignas(4) uint8_t u8CommId;
    alignas(4) uint32_t u32BaudRate;
};
static_assert(sizeof(Nv_ns08_HI_DEV_COMM_CFG_t) == 8, "struct size mismatch");

static inline const Nv_ns08_HI_DEV_COMM_CFG_t *Nv_ns08_HI_DEV_COMM_CFG__const_ptr_add(const Nv_ns08_HI_DEV_COMM_CFG_t *p, size_t i) { return p + i; }
static inline Nv_ns08_HI_DEV_COMM_CFG_t *Nv_ns08_HI_DEV_COMM_CFG__ptr_add(Nv_ns08_HI_DEV_COMM_CFG_t *p, size_t i) { return p + i; }
static inline Nv_ns08_HI_DEV_COMM_CFG_struct_t Nv_ns08_HI_DEV_COMM_CFG_vec_at(Nv_ns08_HI_DEV_COMM_CFG_vec_t vec, size_t i)
__flatbuffers_struct_vec_at(vec, i)
static inline size_t Nv_ns08_HI_DEV_COMM_CFG__size(void) { return 8; }
static inline size_t Nv_ns08_HI_DEV_COMM_CFG_vec_len(Nv_ns08_HI_DEV_COMM_CFG_vec_t vec)
__flatbuffers_vec_len(vec)
__flatbuffers_struct_as_root(Nv_ns08_HI_DEV_COMM_CFG)

__flatbuffers_define_struct_scalar_field(Nv_ns08_HI_DEV_COMM_CFG, u8CommId, flatbuffers_uint8, uint8_t)
__flatbuffers_define_struct_scalar_field(Nv_ns08_HI_DEV_COMM_CFG, u32BaudRate, flatbuffers_uint32, uint32_t)

struct Nv_ns08_HI_DEV_RTSP_CFG {
    alignas(4) uint32_t u32Size;
    alignas(1) uint8_t u8Enable;
    alignas(2) uint16_t u16SvrPort;
};
static_assert(sizeof(Nv_ns08_HI_DEV_RTSP_CFG_t) == 8, "struct size mismatch");

static inline const Nv_ns08_HI_DEV_RTSP_CFG_t *Nv_ns08_HI_DEV_RTSP_CFG__const_ptr_add(const Nv_ns08_HI_DEV_RTSP_CFG_t *p, size_t i) { return p + i; }
static inline Nv_ns08_HI_DEV_RTSP_CFG_t *Nv_ns08_HI_DEV_RTSP_CFG__ptr_add(Nv_ns08_HI_DEV_RTSP_CFG_t *p, size_t i) { return p + i; }
static inline Nv_ns08_HI_DEV_RTSP_CFG_struct_t Nv_ns08_HI_DEV_RTSP_CFG_vec_at(Nv_ns08_HI_DEV_RTSP_CFG_vec_t vec, size_t i)
__flatbuffers_struct_vec_at(vec, i)
static inline size_t Nv_ns08_HI_DEV_RTSP_CFG__size(void) { return 8; }
static inline size_t Nv_ns08_HI_DEV_RTSP_CFG_vec_len(Nv_ns08_HI_DEV_RTSP_CFG_vec_t vec)
__flatbuffers_vec_len(vec)
__flatbuffers_struct_as_root(Nv_ns08_HI_DEV_RTSP_CFG)

__flatbuffers_define_struct_scalar_field(Nv_ns08_HI_DEV_RTSP_CFG, u32Size, flatbuffers_uint32, uint32_t)
__flatbuffers_define_struct_scalar_field(Nv_ns08_HI_DEV_RTSP_CFG, u8Enable, flatbuffers_uint8, uint8_t)
__flatbuffers_define_struct_scalar_field(Nv_ns08_HI_DEV_RTSP_CFG, u16SvrPort, flatbuffers_uint16, uint16_t)

struct Nv_ns08_HI_DEV_CFG {
    alignas(4) uint32_t u32Size;
    alignas(1) char u8SerialId[16];
    alignas(1) uint8_t u8DiNum;
    alignas(1) uint8_t u8DoNum;
    alignas(1) uint8_t u8ChnNum;
    alignas(1) uint8_t u8Rs232Num;
    alignas(1) uint8_t u8Rs485Num;
    alignas(1) uint8_t u8NetCardNum;
    alignas(2) uint16_t u16DevType;
    alignas(4) uint32_t u32HwVer;
    alignas(4) uint32_t u32CoreVer;
    alignas(4) uint32_t u32SoftVer;
    alignas(1) Nv_ns08_TofSensor_enum_t tof_sensor_type;
    alignas(1) Nv_ns08_RgbSensor_enum_t rgb_sensor_type;
    alignas(1) char szMinVer[16];
    alignas(4) uint32_t u32ChipType;
};
static_assert(sizeof(Nv_ns08_HI_DEV_CFG_t) == 64, "struct size mismatch");

static inline const Nv_ns08_HI_DEV_CFG_t *Nv_ns08_HI_DEV_CFG__const_ptr_add(const Nv_ns08_HI_DEV_CFG_t *p, size_t i) { return p + i; }
static inline Nv_ns08_HI_DEV_CFG_t *Nv_ns08_HI_DEV_CFG__ptr_add(Nv_ns08_HI_DEV_CFG_t *p, size_t i) { return p + i; }
static inline Nv_ns08_HI_DEV_CFG_struct_t Nv_ns08_HI_DEV_CFG_vec_at(Nv_ns08_HI_DEV_CFG_vec_t vec, size_t i)
__flatbuffers_struct_vec_at(vec, i)
static inline size_t Nv_ns08_HI_DEV_CFG__size(void) { return 64; }
static inline size_t Nv_ns08_HI_DEV_CFG_vec_len(Nv_ns08_HI_DEV_CFG_vec_t vec)
__flatbuffers_vec_len(vec)
__flatbuffers_struct_as_root(Nv_ns08_HI_DEV_CFG)

__flatbuffers_define_struct_scalar_field(Nv_ns08_HI_DEV_CFG, u32Size, flatbuffers_uint32, uint32_t)
__flatbuffers_define_struct_scalar_fixed_array_field(Nv_ns08_HI_DEV_CFG, u8SerialId, flatbuffers_char, char, 16)
__flatbuffers_define_struct_scalar_field(Nv_ns08_HI_DEV_CFG, u8DiNum, flatbuffers_uint8, uint8_t)
__flatbuffers_define_struct_scalar_field(Nv_ns08_HI_DEV_CFG, u8DoNum, flatbuffers_uint8, uint8_t)
__flatbuffers_define_struct_scalar_field(Nv_ns08_HI_DEV_CFG, u8ChnNum, flatbuffers_uint8, uint8_t)
__flatbuffers_define_struct_scalar_field(Nv_ns08_HI_DEV_CFG, u8Rs232Num, flatbuffers_uint8, uint8_t)
__flatbuffers_define_struct_scalar_field(Nv_ns08_HI_DEV_CFG, u8Rs485Num, flatbuffers_uint8, uint8_t)
__flatbuffers_define_struct_scalar_field(Nv_ns08_HI_DEV_CFG, u8NetCardNum, flatbuffers_uint8, uint8_t)
__flatbuffers_define_struct_scalar_field(Nv_ns08_HI_DEV_CFG, u16DevType, flatbuffers_uint16, uint16_t)
__flatbuffers_define_struct_scalar_field(Nv_ns08_HI_DEV_CFG, u32HwVer, flatbuffers_uint32, uint32_t)
__flatbuffers_define_struct_scalar_field(Nv_ns08_HI_DEV_CFG, u32CoreVer, flatbuffers_uint32, uint32_t)
__flatbuffers_define_struct_scalar_field(Nv_ns08_HI_DEV_CFG, u32SoftVer, flatbuffers_uint32, uint32_t)
__flatbuffers_define_struct_scalar_field(Nv_ns08_HI_DEV_CFG, tof_sensor_type, Nv_ns08_TofSensor, Nv_ns08_TofSensor_enum_t)
__flatbuffers_define_struct_scalar_field(Nv_ns08_HI_DEV_CFG, rgb_sensor_type, Nv_ns08_RgbSensor, Nv_ns08_RgbSensor_enum_t)
__flatbuffers_define_struct_scalar_fixed_array_field(Nv_ns08_HI_DEV_CFG, szMinVer, flatbuffers_char, char, 16)
__flatbuffers_define_struct_scalar_field(Nv_ns08_HI_DEV_CFG, u32ChipType, flatbuffers_uint32, uint32_t)

struct Nv_ns08_HI_PARAM_STABLE_INFO {
    alignas(4) uint32_t u32Size;
    alignas(4) Nv_ns08_HI_DEV_CFG_t struDevCfg;
    alignas(1) char u8MacAddr[12];
    alignas(4) uint32_t u32IPAddr[2];
    alignas(4) uint32_t u32NetMask[2];
    alignas(4) uint32_t u32GateWay[2];
    alignas(1) uint8_t u8RestoreDefault;
};
static_assert(sizeof(Nv_ns08_HI_PARAM_STABLE_INFO_t) == 108, "struct size mismatch");

static inline const Nv_ns08_HI_PARAM_STABLE_INFO_t *Nv_ns08_HI_PARAM_STABLE_INFO__const_ptr_add(const Nv_ns08_HI_PARAM_STABLE_INFO_t *p, size_t i) { return p + i; }
static inline Nv_ns08_HI_PARAM_STABLE_INFO_t *Nv_ns08_HI_PARAM_STABLE_INFO__ptr_add(Nv_ns08_HI_PARAM_STABLE_INFO_t *p, size_t i) { return p + i; }
static inline Nv_ns08_HI_PARAM_STABLE_INFO_struct_t Nv_ns08_HI_PARAM_STABLE_INFO_vec_at(Nv_ns08_HI_PARAM_STABLE_INFO_vec_t vec, size_t i)
__flatbuffers_struct_vec_at(vec, i)
static inline size_t Nv_ns08_HI_PARAM_STABLE_INFO__size(void) { return 108; }
static inline size_t Nv_ns08_HI_PARAM_STABLE_INFO_vec_len(Nv_ns08_HI_PARAM_STABLE_INFO_vec_t vec)
__flatbuffers_vec_len(vec)
__flatbuffers_struct_as_root(Nv_ns08_HI_PARAM_STABLE_INFO)

__flatbuffers_define_struct_scalar_field(Nv_ns08_HI_PARAM_STABLE_INFO, u32Size, flatbuffers_uint32, uint32_t)
__flatbuffers_define_struct_struct_field(Nv_ns08_HI_PARAM_STABLE_INFO, struDevCfg, Nv_ns08_HI_DEV_CFG_struct_t)
__flatbuffers_define_struct_scalar_fixed_array_field(Nv_ns08_HI_PARAM_STABLE_INFO, u8MacAddr, flatbuffers_char, char, 12)
__flatbuffers_define_struct_scalar_fixed_array_field(Nv_ns08_HI_PARAM_STABLE_INFO, u32IPAddr, flatbuffers_uint32, uint32_t, 2)
__flatbuffers_define_struct_scalar_fixed_array_field(Nv_ns08_HI_PARAM_STABLE_INFO, u32NetMask, flatbuffers_uint32, uint32_t, 2)
__flatbuffers_define_struct_scalar_fixed_array_field(Nv_ns08_HI_PARAM_STABLE_INFO, u32GateWay, flatbuffers_uint32, uint32_t, 2)
__flatbuffers_define_struct_scalar_field(Nv_ns08_HI_PARAM_STABLE_INFO, u8RestoreDefault, flatbuffers_uint8, uint8_t)

struct Nv_ns08_NvSysParam {
    alignas(4) Nv_ns08_HI_PARAM_STABLE_INFO_t stable;
    alignas(4) Nv_ns08_HI_DEV_COMM_CFG_t comm;
    alignas(4) Nv_ns08_HI_DEV_RTSP_CFG_t rtsp;
};
static_assert(sizeof(Nv_ns08_NvSysParam_t) == 124, "struct size mismatch");

static inline const Nv_ns08_NvSysParam_t *Nv_ns08_NvSysParam__const_ptr_add(const Nv_ns08_NvSysParam_t *p, size_t i) { return p + i; }
static inline Nv_ns08_NvSysParam_t *Nv_ns08_NvSysParam__ptr_add(Nv_ns08_NvSysParam_t *p, size_t i) { return p + i; }
static inline Nv_ns08_NvSysParam_struct_t Nv_ns08_NvSysParam_vec_at(Nv_ns08_NvSysParam_vec_t vec, size_t i)
__flatbuffers_struct_vec_at(vec, i)
static inline size_t Nv_ns08_NvSysParam__size(void) { return 124; }
static inline size_t Nv_ns08_NvSysParam_vec_len(Nv_ns08_NvSysParam_vec_t vec)
__flatbuffers_vec_len(vec)
__flatbuffers_struct_as_root(Nv_ns08_NvSysParam)

__flatbuffers_define_struct_struct_field(Nv_ns08_NvSysParam, stable, Nv_ns08_HI_PARAM_STABLE_INFO_struct_t)
__flatbuffers_define_struct_struct_field(Nv_ns08_NvSysParam, comm, Nv_ns08_HI_DEV_COMM_CFG_struct_t)
__flatbuffers_define_struct_struct_field(Nv_ns08_NvSysParam, rtsp, Nv_ns08_HI_DEV_RTSP_CFG_struct_t)



#include "flatcc/flatcc_epilogue.h"
#endif /* NV_SYS_PARAM_READER_H */
