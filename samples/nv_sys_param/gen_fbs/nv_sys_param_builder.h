#ifndef NV_SYS_PARAM_BUILDER_H
#define NV_SYS_PARAM_BUILDER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#ifndef NV_SYS_PARAM_READER_H
#include "nv_sys_param_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension "bin"
#endif

#define __Nv_ns08_TofSensor_formal_args , Nv_ns08_TofSensor_enum_t v0
#define __Nv_ns08_TofSensor_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, Nv_ns08_TofSensor, Nv_ns08_TofSensor_enum_t)
#define __Nv_ns08_RgbSensor_formal_args , Nv_ns08_RgbSensor_enum_t v0
#define __Nv_ns08_RgbSensor_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, Nv_ns08_RgbSensor, Nv_ns08_RgbSensor_enum_t)

#define __Nv_ns08_HI_DEV_COMM_CFG_formal_args , uint8_t v0, uint32_t v1
#define __Nv_ns08_HI_DEV_COMM_CFG_call_args , v0, v1
static inline Nv_ns08_HI_DEV_COMM_CFG_t *Nv_ns08_HI_DEV_COMM_CFG_assign(Nv_ns08_HI_DEV_COMM_CFG_t *p, uint8_t v0, uint32_t v1)
{ p->u8CommId = v0; p->u32BaudRate = v1;
  return p; }
static inline Nv_ns08_HI_DEV_COMM_CFG_t *Nv_ns08_HI_DEV_COMM_CFG_copy(Nv_ns08_HI_DEV_COMM_CFG_t *p, const Nv_ns08_HI_DEV_COMM_CFG_t *p2)
{ p->u8CommId = p2->u8CommId; p->u32BaudRate = p2->u32BaudRate;
  return p; }
static inline Nv_ns08_HI_DEV_COMM_CFG_t *Nv_ns08_HI_DEV_COMM_CFG_assign_to_pe(Nv_ns08_HI_DEV_COMM_CFG_t *p, uint8_t v0, uint32_t v1)
{ p->u8CommId = v0; flatbuffers_uint32_assign_to_pe(&p->u32BaudRate, v1);
  return p; }
static inline Nv_ns08_HI_DEV_COMM_CFG_t *Nv_ns08_HI_DEV_COMM_CFG_copy_to_pe(Nv_ns08_HI_DEV_COMM_CFG_t *p, const Nv_ns08_HI_DEV_COMM_CFG_t *p2)
{ p->u8CommId = p2->u8CommId; flatbuffers_uint32_copy_to_pe(&p->u32BaudRate, &p2->u32BaudRate);
  return p; }
static inline Nv_ns08_HI_DEV_COMM_CFG_t *Nv_ns08_HI_DEV_COMM_CFG_assign_from_pe(Nv_ns08_HI_DEV_COMM_CFG_t *p, uint8_t v0, uint32_t v1)
{ p->u8CommId = v0; flatbuffers_uint32_assign_from_pe(&p->u32BaudRate, v1);
  return p; }
static inline Nv_ns08_HI_DEV_COMM_CFG_t *Nv_ns08_HI_DEV_COMM_CFG_copy_from_pe(Nv_ns08_HI_DEV_COMM_CFG_t *p, const Nv_ns08_HI_DEV_COMM_CFG_t *p2)
{ p->u8CommId = p2->u8CommId; flatbuffers_uint32_copy_from_pe(&p->u32BaudRate, &p2->u32BaudRate);
  return p; }
__flatbuffers_build_struct(flatbuffers_, Nv_ns08_HI_DEV_COMM_CFG, 8, 4, Nv_ns08_HI_DEV_COMM_CFG_file_identifier, Nv_ns08_HI_DEV_COMM_CFG_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, Nv_ns08_HI_DEV_COMM_CFG, Nv_ns08_HI_DEV_COMM_CFG_t)

#define __Nv_ns08_HI_DEV_RTSP_CFG_formal_args , uint32_t v0, uint8_t v1, uint16_t v2
#define __Nv_ns08_HI_DEV_RTSP_CFG_call_args , v0, v1, v2
static inline Nv_ns08_HI_DEV_RTSP_CFG_t *Nv_ns08_HI_DEV_RTSP_CFG_assign(Nv_ns08_HI_DEV_RTSP_CFG_t *p, uint32_t v0, uint8_t v1, uint16_t v2)
{ p->u32Size = v0; p->u8Enable = v1; p->u16SvrPort = v2;
  return p; }
static inline Nv_ns08_HI_DEV_RTSP_CFG_t *Nv_ns08_HI_DEV_RTSP_CFG_copy(Nv_ns08_HI_DEV_RTSP_CFG_t *p, const Nv_ns08_HI_DEV_RTSP_CFG_t *p2)
{ p->u32Size = p2->u32Size; p->u8Enable = p2->u8Enable; p->u16SvrPort = p2->u16SvrPort;
  return p; }
static inline Nv_ns08_HI_DEV_RTSP_CFG_t *Nv_ns08_HI_DEV_RTSP_CFG_assign_to_pe(Nv_ns08_HI_DEV_RTSP_CFG_t *p, uint32_t v0, uint8_t v1, uint16_t v2)
{ flatbuffers_uint32_assign_to_pe(&p->u32Size, v0); p->u8Enable = v1; flatbuffers_uint16_assign_to_pe(&p->u16SvrPort, v2);
  return p; }
static inline Nv_ns08_HI_DEV_RTSP_CFG_t *Nv_ns08_HI_DEV_RTSP_CFG_copy_to_pe(Nv_ns08_HI_DEV_RTSP_CFG_t *p, const Nv_ns08_HI_DEV_RTSP_CFG_t *p2)
{ flatbuffers_uint32_copy_to_pe(&p->u32Size, &p2->u32Size); p->u8Enable = p2->u8Enable; flatbuffers_uint16_copy_to_pe(&p->u16SvrPort, &p2->u16SvrPort);
  return p; }
static inline Nv_ns08_HI_DEV_RTSP_CFG_t *Nv_ns08_HI_DEV_RTSP_CFG_assign_from_pe(Nv_ns08_HI_DEV_RTSP_CFG_t *p, uint32_t v0, uint8_t v1, uint16_t v2)
{ flatbuffers_uint32_assign_from_pe(&p->u32Size, v0); p->u8Enable = v1; flatbuffers_uint16_assign_from_pe(&p->u16SvrPort, v2);
  return p; }
static inline Nv_ns08_HI_DEV_RTSP_CFG_t *Nv_ns08_HI_DEV_RTSP_CFG_copy_from_pe(Nv_ns08_HI_DEV_RTSP_CFG_t *p, const Nv_ns08_HI_DEV_RTSP_CFG_t *p2)
{ flatbuffers_uint32_copy_from_pe(&p->u32Size, &p2->u32Size); p->u8Enable = p2->u8Enable; flatbuffers_uint16_copy_from_pe(&p->u16SvrPort, &p2->u16SvrPort);
  return p; }
__flatbuffers_build_struct(flatbuffers_, Nv_ns08_HI_DEV_RTSP_CFG, 8, 4, Nv_ns08_HI_DEV_RTSP_CFG_file_identifier, Nv_ns08_HI_DEV_RTSP_CFG_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, Nv_ns08_HI_DEV_RTSP_CFG, Nv_ns08_HI_DEV_RTSP_CFG_t)

#define __Nv_ns08_HI_DEV_CFG_formal_args ,\
  uint32_t v0, const char v1[16], uint8_t v2, uint8_t v3,\
  uint8_t v4, uint8_t v5, uint8_t v6, uint8_t v7,\
  uint16_t v8, uint32_t v9, uint32_t v10, uint32_t v11,\
  Nv_ns08_TofSensor_enum_t v12, Nv_ns08_RgbSensor_enum_t v13, const char v14[16], uint32_t v15
#define __Nv_ns08_HI_DEV_CFG_call_args ,\
  v0, v1, v2, v3,\
  v4, v5, v6, v7,\
  v8, v9, v10, v11,\
  v12, v13, v14, v15
static inline Nv_ns08_HI_DEV_CFG_t *Nv_ns08_HI_DEV_CFG_assign(Nv_ns08_HI_DEV_CFG_t *p,
  uint32_t v0, const char v1[16], uint8_t v2, uint8_t v3,
  uint8_t v4, uint8_t v5, uint8_t v6, uint8_t v7,
  uint16_t v8, uint32_t v9, uint32_t v10, uint32_t v11,
  Nv_ns08_TofSensor_enum_t v12, Nv_ns08_RgbSensor_enum_t v13, const char v14[16], uint32_t v15)
{ p->u32Size = v0; flatbuffers_char_array_copy(p->u8SerialId, v1, 16); p->u8DiNum = v2; p->u8DoNum = v3;
  p->u8ChnNum = v4; p->u8Rs232Num = v5; p->u8Rs485Num = v6; p->u8NetCardNum = v7;
  p->u16DevType = v8; p->u32HwVer = v9; p->u32CoreVer = v10; p->u32SoftVer = v11;
  p->tof_sensor_type = v12; p->rgb_sensor_type = v13; flatbuffers_char_array_copy(p->szMinVer, v14, 16); p->u32ChipType = v15;
  return p; }
static inline Nv_ns08_HI_DEV_CFG_t *Nv_ns08_HI_DEV_CFG_copy(Nv_ns08_HI_DEV_CFG_t *p, const Nv_ns08_HI_DEV_CFG_t *p2)
{ p->u32Size = p2->u32Size; flatbuffers_char_array_copy(p->u8SerialId, p2->u8SerialId, 16); p->u8DiNum = p2->u8DiNum; p->u8DoNum = p2->u8DoNum;
  p->u8ChnNum = p2->u8ChnNum; p->u8Rs232Num = p2->u8Rs232Num; p->u8Rs485Num = p2->u8Rs485Num; p->u8NetCardNum = p2->u8NetCardNum;
  p->u16DevType = p2->u16DevType; p->u32HwVer = p2->u32HwVer; p->u32CoreVer = p2->u32CoreVer; p->u32SoftVer = p2->u32SoftVer;
  p->tof_sensor_type = p2->tof_sensor_type; p->rgb_sensor_type = p2->rgb_sensor_type; flatbuffers_char_array_copy(p->szMinVer, p2->szMinVer, 16); p->u32ChipType = p2->u32ChipType;
  return p; }
static inline Nv_ns08_HI_DEV_CFG_t *Nv_ns08_HI_DEV_CFG_assign_to_pe(Nv_ns08_HI_DEV_CFG_t *p,
  uint32_t v0, const char v1[16], uint8_t v2, uint8_t v3,
  uint8_t v4, uint8_t v5, uint8_t v6, uint8_t v7,
  uint16_t v8, uint32_t v9, uint32_t v10, uint32_t v11,
  Nv_ns08_TofSensor_enum_t v12, Nv_ns08_RgbSensor_enum_t v13, const char v14[16], uint32_t v15)
{ flatbuffers_uint32_assign_to_pe(&p->u32Size, v0); flatbuffers_char_array_copy_to_pe(p->u8SerialId, v1, 16); p->u8DiNum = v2; p->u8DoNum = v3;
  p->u8ChnNum = v4; p->u8Rs232Num = v5; p->u8Rs485Num = v6; p->u8NetCardNum = v7;
  flatbuffers_uint16_assign_to_pe(&p->u16DevType, v8); flatbuffers_uint32_assign_to_pe(&p->u32HwVer, v9); flatbuffers_uint32_assign_to_pe(&p->u32CoreVer, v10); flatbuffers_uint32_assign_to_pe(&p->u32SoftVer, v11);
  p->tof_sensor_type = v12; p->rgb_sensor_type = v13; flatbuffers_char_array_copy_to_pe(p->szMinVer, v14, 16); flatbuffers_uint32_assign_to_pe(&p->u32ChipType, v15);
  return p; }
static inline Nv_ns08_HI_DEV_CFG_t *Nv_ns08_HI_DEV_CFG_copy_to_pe(Nv_ns08_HI_DEV_CFG_t *p, const Nv_ns08_HI_DEV_CFG_t *p2)
{ flatbuffers_uint32_copy_to_pe(&p->u32Size, &p2->u32Size); flatbuffers_char_array_copy_to_pe(p->u8SerialId, p2->u8SerialId, 16); p->u8DiNum = p2->u8DiNum; p->u8DoNum = p2->u8DoNum;
  p->u8ChnNum = p2->u8ChnNum; p->u8Rs232Num = p2->u8Rs232Num; p->u8Rs485Num = p2->u8Rs485Num; p->u8NetCardNum = p2->u8NetCardNum;
  flatbuffers_uint16_copy_to_pe(&p->u16DevType, &p2->u16DevType); flatbuffers_uint32_copy_to_pe(&p->u32HwVer, &p2->u32HwVer); flatbuffers_uint32_copy_to_pe(&p->u32CoreVer, &p2->u32CoreVer); flatbuffers_uint32_copy_to_pe(&p->u32SoftVer, &p2->u32SoftVer);
  p->tof_sensor_type = p2->tof_sensor_type; p->rgb_sensor_type = p2->rgb_sensor_type; flatbuffers_char_array_copy_to_pe(p->szMinVer, p2->szMinVer, 16); flatbuffers_uint32_copy_to_pe(&p->u32ChipType, &p2->u32ChipType);
  return p; }
static inline Nv_ns08_HI_DEV_CFG_t *Nv_ns08_HI_DEV_CFG_assign_from_pe(Nv_ns08_HI_DEV_CFG_t *p,
  uint32_t v0, const char v1[16], uint8_t v2, uint8_t v3,
  uint8_t v4, uint8_t v5, uint8_t v6, uint8_t v7,
  uint16_t v8, uint32_t v9, uint32_t v10, uint32_t v11,
  Nv_ns08_TofSensor_enum_t v12, Nv_ns08_RgbSensor_enum_t v13, const char v14[16], uint32_t v15)
{ flatbuffers_uint32_assign_from_pe(&p->u32Size, v0); flatbuffers_char_array_copy_from_pe(p->u8SerialId, v1, 16); p->u8DiNum = v2; p->u8DoNum = v3;
  p->u8ChnNum = v4; p->u8Rs232Num = v5; p->u8Rs485Num = v6; p->u8NetCardNum = v7;
  flatbuffers_uint16_assign_from_pe(&p->u16DevType, v8); flatbuffers_uint32_assign_from_pe(&p->u32HwVer, v9); flatbuffers_uint32_assign_from_pe(&p->u32CoreVer, v10); flatbuffers_uint32_assign_from_pe(&p->u32SoftVer, v11);
  p->tof_sensor_type = v12; p->rgb_sensor_type = v13; flatbuffers_char_array_copy_from_pe(p->szMinVer, v14, 16); flatbuffers_uint32_assign_from_pe(&p->u32ChipType, v15);
  return p; }
static inline Nv_ns08_HI_DEV_CFG_t *Nv_ns08_HI_DEV_CFG_copy_from_pe(Nv_ns08_HI_DEV_CFG_t *p, const Nv_ns08_HI_DEV_CFG_t *p2)
{ flatbuffers_uint32_copy_from_pe(&p->u32Size, &p2->u32Size); flatbuffers_char_array_copy_from_pe(p->u8SerialId, p2->u8SerialId, 16); p->u8DiNum = p2->u8DiNum; p->u8DoNum = p2->u8DoNum;
  p->u8ChnNum = p2->u8ChnNum; p->u8Rs232Num = p2->u8Rs232Num; p->u8Rs485Num = p2->u8Rs485Num; p->u8NetCardNum = p2->u8NetCardNum;
  flatbuffers_uint16_copy_from_pe(&p->u16DevType, &p2->u16DevType); flatbuffers_uint32_copy_from_pe(&p->u32HwVer, &p2->u32HwVer); flatbuffers_uint32_copy_from_pe(&p->u32CoreVer, &p2->u32CoreVer); flatbuffers_uint32_copy_from_pe(&p->u32SoftVer, &p2->u32SoftVer);
  p->tof_sensor_type = p2->tof_sensor_type; p->rgb_sensor_type = p2->rgb_sensor_type; flatbuffers_char_array_copy_from_pe(p->szMinVer, p2->szMinVer, 16); flatbuffers_uint32_copy_from_pe(&p->u32ChipType, &p2->u32ChipType);
  return p; }
__flatbuffers_build_struct(flatbuffers_, Nv_ns08_HI_DEV_CFG, 64, 4, Nv_ns08_HI_DEV_CFG_file_identifier, Nv_ns08_HI_DEV_CFG_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, Nv_ns08_HI_DEV_CFG, Nv_ns08_HI_DEV_CFG_t)

#define __Nv_ns08_HI_PARAM_STABLE_INFO_formal_args ,\
  uint32_t v0, uint32_t v1, const char v2[16], uint8_t v3,\
  uint8_t v4, uint8_t v5, uint8_t v6, uint8_t v7,\
  uint8_t v8, uint16_t v9, uint32_t v10, uint32_t v11,\
  uint32_t v12, Nv_ns08_TofSensor_enum_t v13, Nv_ns08_RgbSensor_enum_t v14, const char v15[16],\
  uint32_t v16, const char v17[12], const uint32_t v18[2], const uint32_t v19[2], const uint32_t v20[2], uint8_t v21
#define __Nv_ns08_HI_PARAM_STABLE_INFO_call_args ,\
  v0, v1, v2, v3,\
  v4, v5, v6, v7,\
  v8, v9, v10, v11,\
  v12, v13, v14, v15,\
  v16, v17, v18, v19, v20, v21
static inline Nv_ns08_HI_PARAM_STABLE_INFO_t *Nv_ns08_HI_PARAM_STABLE_INFO_assign(Nv_ns08_HI_PARAM_STABLE_INFO_t *p,
  uint32_t v0, uint32_t v1, const char v2[16], uint8_t v3,
  uint8_t v4, uint8_t v5, uint8_t v6, uint8_t v7,
  uint8_t v8, uint16_t v9, uint32_t v10, uint32_t v11,
  uint32_t v12, Nv_ns08_TofSensor_enum_t v13, Nv_ns08_RgbSensor_enum_t v14, const char v15[16],
  uint32_t v16, const char v17[12], const uint32_t v18[2], const uint32_t v19[2], const uint32_t v20[2], uint8_t v21)
{ p->u32Size = v0; Nv_ns08_HI_DEV_CFG_assign(&p->struDevCfg,
  v1, v2, v3, v4,
  v5, v6, v7, v8,
  v9, v10, v11, v12,
  v13, v14, v15, v16); flatbuffers_char_array_copy(p->u8MacAddr, v17, 12); flatbuffers_uint32_array_copy(p->u32IPAddr, v18, 2); flatbuffers_uint32_array_copy(p->u32NetMask, v19, 2);
  flatbuffers_uint32_array_copy(p->u32GateWay, v20, 2); p->u8RestoreDefault = v21;
  return p; }
static inline Nv_ns08_HI_PARAM_STABLE_INFO_t *Nv_ns08_HI_PARAM_STABLE_INFO_copy(Nv_ns08_HI_PARAM_STABLE_INFO_t *p, const Nv_ns08_HI_PARAM_STABLE_INFO_t *p2)
{ p->u32Size = p2->u32Size; Nv_ns08_HI_DEV_CFG_copy(&p->struDevCfg, &p2->struDevCfg); flatbuffers_char_array_copy(p->u8MacAddr, p2->u8MacAddr, 12); flatbuffers_uint32_array_copy(p->u32IPAddr, p2->u32IPAddr, 2);
  flatbuffers_uint32_array_copy(p->u32NetMask, p2->u32NetMask, 2); flatbuffers_uint32_array_copy(p->u32GateWay, p2->u32GateWay, 2); p->u8RestoreDefault = p2->u8RestoreDefault;
  return p; }
static inline Nv_ns08_HI_PARAM_STABLE_INFO_t *Nv_ns08_HI_PARAM_STABLE_INFO_assign_to_pe(Nv_ns08_HI_PARAM_STABLE_INFO_t *p,
  uint32_t v0, uint32_t v1, const char v2[16], uint8_t v3,
  uint8_t v4, uint8_t v5, uint8_t v6, uint8_t v7,
  uint8_t v8, uint16_t v9, uint32_t v10, uint32_t v11,
  uint32_t v12, Nv_ns08_TofSensor_enum_t v13, Nv_ns08_RgbSensor_enum_t v14, const char v15[16],
  uint32_t v16, const char v17[12], const uint32_t v18[2], const uint32_t v19[2], const uint32_t v20[2], uint8_t v21)
{ flatbuffers_uint32_assign_to_pe(&p->u32Size, v0); Nv_ns08_HI_DEV_CFG_assign_to_pe(&p->struDevCfg,
  v1, v2, v3, v4,
  v5, v6, v7, v8,
  v9, v10, v11, v12,
  v13, v14, v15, v16); flatbuffers_char_array_copy_to_pe(p->u8MacAddr, v17, 12); flatbuffers_uint32_array_copy_to_pe(p->u32IPAddr, v18, 2); flatbuffers_uint32_array_copy_to_pe(p->u32NetMask, v19, 2);
  flatbuffers_uint32_array_copy_to_pe(p->u32GateWay, v20, 2); p->u8RestoreDefault = v21;
  return p; }
static inline Nv_ns08_HI_PARAM_STABLE_INFO_t *Nv_ns08_HI_PARAM_STABLE_INFO_copy_to_pe(Nv_ns08_HI_PARAM_STABLE_INFO_t *p, const Nv_ns08_HI_PARAM_STABLE_INFO_t *p2)
{ flatbuffers_uint32_copy_to_pe(&p->u32Size, &p2->u32Size); Nv_ns08_HI_DEV_CFG_copy_to_pe(&p->struDevCfg, &p2->struDevCfg); flatbuffers_char_array_copy_to_pe(p->u8MacAddr, p2->u8MacAddr, 12); flatbuffers_uint32_array_copy_to_pe(p->u32IPAddr, p2->u32IPAddr, 2);
  flatbuffers_uint32_array_copy_to_pe(p->u32NetMask, p2->u32NetMask, 2); flatbuffers_uint32_array_copy_to_pe(p->u32GateWay, p2->u32GateWay, 2); p->u8RestoreDefault = p2->u8RestoreDefault;
  return p; }
static inline Nv_ns08_HI_PARAM_STABLE_INFO_t *Nv_ns08_HI_PARAM_STABLE_INFO_assign_from_pe(Nv_ns08_HI_PARAM_STABLE_INFO_t *p,
  uint32_t v0, uint32_t v1, const char v2[16], uint8_t v3,
  uint8_t v4, uint8_t v5, uint8_t v6, uint8_t v7,
  uint8_t v8, uint16_t v9, uint32_t v10, uint32_t v11,
  uint32_t v12, Nv_ns08_TofSensor_enum_t v13, Nv_ns08_RgbSensor_enum_t v14, const char v15[16],
  uint32_t v16, const char v17[12], const uint32_t v18[2], const uint32_t v19[2], const uint32_t v20[2], uint8_t v21)
{ flatbuffers_uint32_assign_from_pe(&p->u32Size, v0); Nv_ns08_HI_DEV_CFG_assign_from_pe(&p->struDevCfg,
  v1, v2, v3, v4,
  v5, v6, v7, v8,
  v9, v10, v11, v12,
  v13, v14, v15, v16); flatbuffers_char_array_copy_from_pe(p->u8MacAddr, v17, 12); flatbuffers_uint32_array_copy_from_pe(p->u32IPAddr, v18, 2); flatbuffers_uint32_array_copy_from_pe(p->u32NetMask, v19, 2);
  flatbuffers_uint32_array_copy_from_pe(p->u32GateWay, v20, 2); p->u8RestoreDefault = v21;
  return p; }
static inline Nv_ns08_HI_PARAM_STABLE_INFO_t *Nv_ns08_HI_PARAM_STABLE_INFO_copy_from_pe(Nv_ns08_HI_PARAM_STABLE_INFO_t *p, const Nv_ns08_HI_PARAM_STABLE_INFO_t *p2)
{ flatbuffers_uint32_copy_from_pe(&p->u32Size, &p2->u32Size); Nv_ns08_HI_DEV_CFG_copy_from_pe(&p->struDevCfg, &p2->struDevCfg); flatbuffers_char_array_copy_from_pe(p->u8MacAddr, p2->u8MacAddr, 12); flatbuffers_uint32_array_copy_from_pe(p->u32IPAddr, p2->u32IPAddr, 2);
  flatbuffers_uint32_array_copy_from_pe(p->u32NetMask, p2->u32NetMask, 2); flatbuffers_uint32_array_copy_from_pe(p->u32GateWay, p2->u32GateWay, 2); p->u8RestoreDefault = p2->u8RestoreDefault;
  return p; }
__flatbuffers_build_struct(flatbuffers_, Nv_ns08_HI_PARAM_STABLE_INFO, 108, 4, Nv_ns08_HI_PARAM_STABLE_INFO_file_identifier, Nv_ns08_HI_PARAM_STABLE_INFO_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, Nv_ns08_HI_PARAM_STABLE_INFO, Nv_ns08_HI_PARAM_STABLE_INFO_t)

#define __Nv_ns08_NvSysParam_formal_args ,\
  uint32_t v0, uint32_t v1, const char v2[16], uint8_t v3,\
  uint8_t v4, uint8_t v5, uint8_t v6, uint8_t v7,\
  uint8_t v8, uint16_t v9, uint32_t v10, uint32_t v11,\
  uint32_t v12, Nv_ns08_TofSensor_enum_t v13, Nv_ns08_RgbSensor_enum_t v14, const char v15[16],\
  uint32_t v16, const char v17[12], const uint32_t v18[2], const uint32_t v19[2],\
  const uint32_t v20[2], uint8_t v21, uint8_t v22, uint32_t v23,\
  uint32_t v24, uint8_t v25, uint16_t v26
#define __Nv_ns08_NvSysParam_call_args ,\
  v0, v1, v2, v3,\
  v4, v5, v6, v7,\
  v8, v9, v10, v11,\
  v12, v13, v14, v15,\
  v16, v17, v18, v19,\
  v20, v21, v22, v23,\
  v24, v25, v26
static inline Nv_ns08_NvSysParam_t *Nv_ns08_NvSysParam_assign(Nv_ns08_NvSysParam_t *p,
  uint32_t v0, uint32_t v1, const char v2[16], uint8_t v3,
  uint8_t v4, uint8_t v5, uint8_t v6, uint8_t v7,
  uint8_t v8, uint16_t v9, uint32_t v10, uint32_t v11,
  uint32_t v12, Nv_ns08_TofSensor_enum_t v13, Nv_ns08_RgbSensor_enum_t v14, const char v15[16],
  uint32_t v16, const char v17[12], const uint32_t v18[2], const uint32_t v19[2],
  const uint32_t v20[2], uint8_t v21, uint8_t v22, uint32_t v23,
  uint32_t v24, uint8_t v25, uint16_t v26)
{ Nv_ns08_HI_PARAM_STABLE_INFO_assign(&p->stable,
  v0, v1, v2, v3,
  v4, v5, v6, v7,
  v8, v9, v10, v11,
  v12, v13, v14, v15,
  v16, v17, v18, v19,
  v20, v21); Nv_ns08_HI_DEV_COMM_CFG_assign(&p->comm,
  v22, v23);
  Nv_ns08_HI_DEV_RTSP_CFG_assign(&p->rtsp,
  v24, v25, v26);
  return p; }
static inline Nv_ns08_NvSysParam_t *Nv_ns08_NvSysParam_copy(Nv_ns08_NvSysParam_t *p, const Nv_ns08_NvSysParam_t *p2)
{ Nv_ns08_HI_PARAM_STABLE_INFO_copy(&p->stable, &p2->stable); Nv_ns08_HI_DEV_COMM_CFG_copy(&p->comm, &p2->comm); Nv_ns08_HI_DEV_RTSP_CFG_copy(&p->rtsp, &p2->rtsp);
  return p; }
static inline Nv_ns08_NvSysParam_t *Nv_ns08_NvSysParam_assign_to_pe(Nv_ns08_NvSysParam_t *p,
  uint32_t v0, uint32_t v1, const char v2[16], uint8_t v3,
  uint8_t v4, uint8_t v5, uint8_t v6, uint8_t v7,
  uint8_t v8, uint16_t v9, uint32_t v10, uint32_t v11,
  uint32_t v12, Nv_ns08_TofSensor_enum_t v13, Nv_ns08_RgbSensor_enum_t v14, const char v15[16],
  uint32_t v16, const char v17[12], const uint32_t v18[2], const uint32_t v19[2],
  const uint32_t v20[2], uint8_t v21, uint8_t v22, uint32_t v23,
  uint32_t v24, uint8_t v25, uint16_t v26)
{ Nv_ns08_HI_PARAM_STABLE_INFO_assign_to_pe(&p->stable,
  v0, v1, v2, v3,
  v4, v5, v6, v7,
  v8, v9, v10, v11,
  v12, v13, v14, v15,
  v16, v17, v18, v19,
  v20, v21); Nv_ns08_HI_DEV_COMM_CFG_assign_to_pe(&p->comm,
  v22, v23);
  Nv_ns08_HI_DEV_RTSP_CFG_assign_to_pe(&p->rtsp,
  v24, v25, v26);
  return p; }
static inline Nv_ns08_NvSysParam_t *Nv_ns08_NvSysParam_copy_to_pe(Nv_ns08_NvSysParam_t *p, const Nv_ns08_NvSysParam_t *p2)
{ Nv_ns08_HI_PARAM_STABLE_INFO_copy_to_pe(&p->stable, &p2->stable); Nv_ns08_HI_DEV_COMM_CFG_copy_to_pe(&p->comm, &p2->comm); Nv_ns08_HI_DEV_RTSP_CFG_copy_to_pe(&p->rtsp, &p2->rtsp);
  return p; }
static inline Nv_ns08_NvSysParam_t *Nv_ns08_NvSysParam_assign_from_pe(Nv_ns08_NvSysParam_t *p,
  uint32_t v0, uint32_t v1, const char v2[16], uint8_t v3,
  uint8_t v4, uint8_t v5, uint8_t v6, uint8_t v7,
  uint8_t v8, uint16_t v9, uint32_t v10, uint32_t v11,
  uint32_t v12, Nv_ns08_TofSensor_enum_t v13, Nv_ns08_RgbSensor_enum_t v14, const char v15[16],
  uint32_t v16, const char v17[12], const uint32_t v18[2], const uint32_t v19[2],
  const uint32_t v20[2], uint8_t v21, uint8_t v22, uint32_t v23,
  uint32_t v24, uint8_t v25, uint16_t v26)
{ Nv_ns08_HI_PARAM_STABLE_INFO_assign_from_pe(&p->stable,
  v0, v1, v2, v3,
  v4, v5, v6, v7,
  v8, v9, v10, v11,
  v12, v13, v14, v15,
  v16, v17, v18, v19,
  v20, v21); Nv_ns08_HI_DEV_COMM_CFG_assign_from_pe(&p->comm,
  v22, v23);
  Nv_ns08_HI_DEV_RTSP_CFG_assign_from_pe(&p->rtsp,
  v24, v25, v26);
  return p; }
static inline Nv_ns08_NvSysParam_t *Nv_ns08_NvSysParam_copy_from_pe(Nv_ns08_NvSysParam_t *p, const Nv_ns08_NvSysParam_t *p2)
{ Nv_ns08_HI_PARAM_STABLE_INFO_copy_from_pe(&p->stable, &p2->stable); Nv_ns08_HI_DEV_COMM_CFG_copy_from_pe(&p->comm, &p2->comm); Nv_ns08_HI_DEV_RTSP_CFG_copy_from_pe(&p->rtsp, &p2->rtsp);
  return p; }
__flatbuffers_build_struct(flatbuffers_, Nv_ns08_NvSysParam, 124, 4, Nv_ns08_NvSysParam_file_identifier, Nv_ns08_NvSysParam_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, Nv_ns08_NvSysParam, Nv_ns08_NvSysParam_t)

#include "flatcc/flatcc_epilogue.h"
#endif /* NV_SYS_PARAM_BUILDER_H */
